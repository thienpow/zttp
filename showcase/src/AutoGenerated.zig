// Auto-generated by routegen.zig
const std = @import("std");
const zttp = @import("zttp");

pub const Route = zttp.Route;
pub const Template = zttp.Template;

pub fn getRoutes(allocator: std.mem.Allocator) ![]const Route {
    var routes = std.ArrayList(Route).init(allocator);
    errdefer {
        for (routes.items) |r| {
            allocator.free(r.module_name);
            allocator.free(r.path);
        }
        routes.deinit();
    }
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .get,
        .path = try allocator.dupe(u8, "/"),
        .handler = @import("routes/index.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .get,
        .path = try allocator.dupe(u8, "/demos"),
        .handler = @import("routes/demos/index.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "websocket"),
        .method = .get,
        .path = try allocator.dupe(u8, "/demos/websocket/hello"),
        .ws_handler = @import("routes/demos/websocket/hello.zig").ws,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "websocket"),
        .method = .get,
        .path = try allocator.dupe(u8, "/demos/websocket/chat/ws"),
        .ws_handler = @import("routes/demos/websocket/chat/ws.zig").ws,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .get,
        .path = try allocator.dupe(u8, "/demos/websocket/chat"),
        .handler = @import("routes/demos/websocket/chat/index.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .get,
        .path = try allocator.dupe(u8, "/demos/http2"),
        .handler = @import("routes/demos/http2/index.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .get,
        .path = try allocator.dupe(u8, "/demos/conditionals"),
        .handler = @import("routes/demos/conditionals/index.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .get,
        .path = try allocator.dupe(u8, "/demos/users/:id"),
        .handler = @import("routes/demos/users/:id/index.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .post,
        .path = try allocator.dupe(u8, "/demos/users/:id"),
        .handler = @import("routes/demos/users/:id/index.zig").post,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .get,
        .path = try allocator.dupe(u8, "/demos/components"),
        .handler = @import("routes/demos/components/index.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .get,
        .path = try allocator.dupe(u8, "/demos/profile"),
        .handler = @import("routes/demos/profile/index.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "login"),
        .method = .get,
        .path = try allocator.dupe(u8, "/demos/login"),
        .handler = @import("routes/demos/login.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "login"),
        .method = .post,
        .path = try allocator.dupe(u8, "/demos/login"),
        .handler = @import("routes/demos/login.zig").post,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "logout"),
        .method = .get,
        .path = try allocator.dupe(u8, "/demos/logout"),
        .handler = @import("routes/demos/logout.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "json"),
        .method = .get,
        .path = try allocator.dupe(u8, "/api/json"),
        .handler = @import("routes/api/json.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "json"),
        .method = .post,
        .path = try allocator.dupe(u8, "/api/json"),
        .handler = @import("routes/api/json.zig").post,
    });
    return routes.toOwnedSlice();
}

pub fn getTemplates(allocator: std.mem.Allocator) ![]const Template {
    var templates = std.ArrayList(Template).init(allocator);
    errdefer {
        for (templates.items) |t| {
            allocator.free(t.name);
        }
        templates.deinit();
    }
    try templates.append(Template{
        .name = try allocator.dupe(u8, "layout"),
        .buffer = @embedFile("routes/layout.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "demos/websocket/chat/index"),
        .buffer = @embedFile("routes/demos/websocket/chat/index.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "demos/http2/index"),
        .buffer = @embedFile("routes/demos/http2/index.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "demos/login"),
        .buffer = @embedFile("routes/demos/login.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "demos/conditionals/index"),
        .buffer = @embedFile("routes/demos/conditionals/index.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "demos/components/index"),
        .buffer = @embedFile("routes/demos/components/index.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "demos/profile/layout"),
        .buffer = @embedFile("routes/demos/profile/layout.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "demos/profile/index"),
        .buffer = @embedFile("routes/demos/profile/index.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "demos/index"),
        .buffer = @embedFile("routes/demos/index.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "components/tooltip"),
        .buffer = @embedFile("routes/components/tooltip.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "components/modal"),
        .buffer = @embedFile("routes/components/modal.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "components/accordion"),
        .buffer = @embedFile("routes/components/accordion.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "components/button"),
        .buffer = @embedFile("routes/components/button.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "components/tab"),
        .buffer = @embedFile("routes/components/tab.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "components/dropdown"),
        .buffer = @embedFile("routes/components/dropdown.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "index"),
        .buffer = @embedFile("routes/index.zmx"),
    });
    return templates.toOwnedSlice();
}