#extends "layout"

#block content
    <title>ZTTP Showcase - WebSocket Chat</title>
    #css "/css/chat.css"

    <div id="chat-container">
        <h1>Simple WebSocket Chat</h1>
        <p>Powered by ZTTP WebSockets and HTMX.</p>
        <div id="notifications"></div>
        <div id="chat-room" hx-ext="ws" ws-connect="/demos/websocket/chat/ws">
            <div id="chat-messages">
                <div class="message-wrapper">
                    <div class="chat-message system">Connecting to chat...</div>
                </div>
            </div>

            <form id="chat-form" ws-send>
                <input type="text" id="message-input" name="chat_message" placeholder="Type your message..." autocomplete="off" required>
                <button type="submit">Send</button>
            </form>
        </div>
    </div>

    <script>
        // Get username from query parameter
        const urlParams = new URLSearchParams(window.location.search);
        const username = urlParams.get('user') || 'Guest';
        const room = urlParams.get('room') || 'zttp';

        // Debug connection attempts
        document.addEventListener('htmx:wsConnecting', function(event) {
            console.log('Attempting to connect to WebSocket:', event.detail);
        });

        // Update UI on WebSocket connection
        document.addEventListener('htmx:wsOpen', function(event) {
            console.log('WebSocket connected:', event.detail);
            // *** Get the socketWrapper from the event detail ***
            // Your log shows it's event.detail.socketWrapper
            const htmxWebSocketSender = event.detail.socketWrapper;
            // ****************************************************

            // Ensure the sender object is available before trying to send
            if (htmxWebSocketSender) {
                // Construct the registration message payload
                const registrationMessage = {
                    type: "register", // Matches the type your server checks for
                    username: username, // Use the username obtained earlier
                    room: room
                };

                // Convert the JSON object to a string
                const messageToSend = JSON.stringify(registrationMessage);

                console.log('Sending registration message:', messageToSend);

                // *** Send the message using the socketWrapper ***
                htmxWebSocketSender.send(messageToSend);
                // *************************************************

            } else {
                console.error('WebSocket sender object not found in htmx:wsOpen event.');
                // Handle this case if necessary, though unlikely if wsOpen fired
            }

            const messagesContainer = document.getElementById('chat-messages');
            const connectingMessage = messagesContainer.querySelector('.chat-message.system');
            if (connectingMessage && connectingMessage.textContent.includes('Connecting')) {
                connectingMessage.textContent = 'Connected!';
                connectingMessage.style.backgroundColor = '#d4edda';
                setTimeout(() => {
                    connectingMessage.parentElement.remove();
                }, 1500);
            }
        });

        // Debug connection errors
        document.addEventListener('htmx:wsError', function(event) {
            console.error('WebSocket error:', event.detail);
            const messagesContainer = document.getElementById('chat-messages');
            const wrapper = document.createElement('div');
            wrapper.className = 'message-wrapper';
            const errorMessage = document.createElement('div');
            errorMessage.className = 'chat-message system';
            errorMessage.textContent = 'Connection error. Retrying...';
            wrapper.appendChild(errorMessage);
            messagesContainer.appendChild(wrapper);
        });

        // Debug connection close
        document.addEventListener('htmx:wsClose', function(event) {
            console.log('WebSocket closed:', event.detail);
            const messagesContainer = document.getElementById('chat-messages');
            const wrapper = document.createElement('div');
            wrapper.className = 'message-wrapper';
            const closeMessage = document.createElement('div');
            closeMessage.className = 'chat-message system';
            closeMessage.textContent = 'Connection closed.';
            wrapper.appendChild(closeMessage);
            messagesContainer.appendChild(wrapper);
        });

        // Clear input and append self-message after sending
        document.addEventListener('htmx:wsAfterSend', function(event) {
            console.log('Message sent:', event.detail);
            const form = event.detail.elt;
            const input = form.querySelector('input[name="chat_message"]');
            const messageText = input.value.trim();

            if (messageText) {
                const messagesContainer = document.getElementById('chat-messages');
                const wrapper = document.createElement('div');
                wrapper.className = 'message-wrapper';
                const selfMessage = document.createElement('div');
                selfMessage.className = 'chat-message self';
                selfMessage.textContent = `${username}: ${messageText}`;
                wrapper.appendChild(selfMessage);
                messagesContainer.appendChild(wrapper);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                input.value = '';
            }
        });

        // Debug incoming messages
        document.addEventListener('htmx:wsBeforeMessage', function(event) {
            console.log('Received WebSocket message:', event.detail.message);
        });

        // Scroll to bottom after message is appended
        document.addEventListener('htmx:wsAfterMessage', function(event) {
            console.log('Message processed:', event.detail.message);
            const messagesContainer = document.getElementById('chat-messages');
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });
    </script>
#endblock
