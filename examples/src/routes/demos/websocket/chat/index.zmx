#extends "layout"

    #block content
        <title>ZTTP Showcase - WebSocket Chat</title>
        <style>
            #chat-messages {
                height: 400px;
                overflow-y: scroll;
                border: 1px solid #ccc;
                padding: 10px;
                margin-bottom: 10px;
                background-color: #f9f9f9;
                display: flex;
                flex-direction: column-reverse; /* New messages appear at the bottom */
            }
             .chat-message {
                 padding: 5px 8px;
                 margin-bottom: 5px;
                 border-radius: 4px;
                 max-width: 80%;
             }
             .chat-message.self {
                 background-color: #d1ecf1; /* Light blue for self */
                 align-self: flex-end;
                 text-align: right;
             }
             .chat-message.other {
                 background-color: #e2e3e5; /* Light grey for others */
                 align-self: flex-start;
             }
            #chat-form {
                display: flex;
            }
            #chat-form input[type="text"] {
                flex-grow: 1;
                padding: 8px;
                margin-right: 5px;
                border: 1px solid #ccc;
                border-radius: 4px;
            }
            #chat-form button {
                padding: 8px 15px;
            }
        </style>

        <h1>Simple WebSocket Chat</h1>
        <p>Powered by ZTTP WebSockets and HTMX.</p>

        <!-- Add hx-ext attribute to enable WebSocket extension -->
        <div id="chat-room" hx-ext="ws" ws-connect="/demos/chat">

            <!-- Messages will be appended here -->
            <!-- hx-swap="beforeend" is crucial for appending -->
            <div id="chat-messages" hx-swap="beforeend">
                <div style="text-align: center; color: #888;">Connecting...</div>
                <!-- Messages from server will replace this div's content if swap isn't adjusted -->
                <!-- But with beforeend, they append *inside* it -->
            </div>

            <!-- Form to send messages via WebSocket -->
            <!-- ws-send tells HTMX to send form data over the WS connection -->
            <form id="chat-form" ws-send>
                <input type="text" id="message-input" name="chat_message" placeholder="Enter message..." autocomplete="off" required>
                <button class="btn" data-variant="default" type="submit">Send</button>
            </form>

             <!-- Add a hidden input/template to structure self-messages -->
             <template id="self-message-template">
                 <div class="chat-message self">You: {message}</div>
             </template>

        </div>
    #endblock

    #block footer_scripts
        <script>
          // Optional: Client-side enhancement to clear input after sending
          // and display self-message immediately without waiting for broadcast.
          document.addEventListener('htmx:wsAfterSend', function(event) {
            const form = event.detail.elt; // The form that sent the message
            const input = form.querySelector('input[name="chat_message"]');
            const messageText = input.value; // Get the message text

            if (input && messageText) {
              // 1. Clear the input field
              input.value = '';

              // 2. Display the message locally immediately
              const messagesContainer = document.getElementById('chat-messages');
              const template = document.getElementById('self-message-template');
              if (messagesContainer && template) {
                 // Clone the template content
                 const clone = template.content.cloneNode(true);
                 // Find the element inside the clone and set its text content
                 const messageDiv = clone.querySelector('.chat-message');
                 if (messageDiv) {
                    // Replace placeholder - simple text replacement
                     messageDiv.textContent = messageDiv.textContent.replace('{message}', messageText);
                 }
                 // Append the new message div
                 messagesContainer.appendChild(clone);
                 // Scroll to bottom (optional, might conflict with flex-direction: column-reverse)
                 // messagesContainer.scrollTop = messagesContainer.scrollHeight;
              }
            }
          });

          // Clear the initial "Connecting..." message once connected
          // This assumes the server doesn't send an initial message immediately
          // which HTMX would swap in.
           document.body.addEventListener('htmx:wsOpen', function(evt) {
             const messagesContainer = document.getElementById('chat-messages');
             if (messagesContainer && messagesContainer.children.length === 1 && messagesContainer.children[0].textContent === 'Connecting...') {
                 messagesContainer.innerHTML = '<div style="text-align: center; color: green;">Connected!</div>'; // Replace connecting message
                 setTimeout(() => { // Remove "Connected" message after a short delay
                    if (messagesContainer.children.length === 1 && messagesContainer.children[0].textContent === 'Connected!') {
                        messagesContainer.innerHTML = '';
                    }
                 }, 1500);
             }
           });

        </script>
    #endblock
