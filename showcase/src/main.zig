const std = @import("std");
const zttp = @import("zttp");
const Server = zttp.Server;
const WebSocket = zttp.WebSocket;

const app = @import("app");

pub fn main() !void {
    // Set up allocator
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer _ = gpa.deinit();
    const allocator = gpa.allocator();

    var app_ctx = try app.AppContext.init(allocator);
    errdefer app_ctx.deinit();

    // Server configuration with TLS
    const options = Server.Options{
        .app_context_ptr = app_ctx,
        .port = 8443,
        .websocket = WebSocket.Options{
            .max_payload_size = 2 * 1024 * 1024,
            .read_buffer_size = 4096,
        },
        .tls = .{
            .cert_file = "~/certs/localhost.crt",
            .key_file = "~/certs/localhost.key",
        },
    };

    // Create the server, 3 instances on same port
    var bundle = try zttp.createServer(allocator, options, 3);
    defer bundle.deinit();

    // Add middleware
    try bundle.use(zttp.middleware.static);
    try bundle.use(zttp.middleware.htmx);

    // Load routes and templates
    try bundle.loadRoutes(@import("AutoGenerated.zig").getRoutes);
    try bundle.loadTemplates(@import("AutoGenerated.zig").getTemplates);

    // Start the server
    std.log.info("Server running at https://127.0.0.1:{d}", .{options.port});
    try bundle.start();
}
