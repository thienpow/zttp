const std = @import("std");
const zttp = @import("zttp");
const Server = zttp.Server;
const WebSocket = zttp.WebSocket;
const ThreadPool = zttp.ThreadPool;

pub fn main() !void {
    // Set up allocator
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer _ = gpa.deinit();
    const allocator = gpa.allocator();

    // Server configuration
    const options = Server.Options{
        .port = 8088,

        .websocket_options = WebSocket.Options{
            .max_payload_size = 2 * 1024 * 1024,
            .read_buffer_size = 8192,
        },
    };

    // Create the server
    var bundle = try zttp.createServer(allocator, options);
    defer bundle.deinit();

    // Add middleware
    try bundle.use(zttp.Middleware.static);
    try bundle.use(zttp.Middleware.htmx);

    // Load routes and templates
    try bundle.loadRoutes(@import("AutoGenerated.zig").getRoutes);
    try bundle.loadTemplates(@import("AutoGenerated.zig").getTemplates);

    // Start the server
    try bundle.start(true);
}
