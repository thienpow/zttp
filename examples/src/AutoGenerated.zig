// Auto-generated by routegen.zig
const std = @import("std");
const zttp = @import("zttp");

pub const Route = zttp.Route;
pub const Template = zttp.Template;

pub fn getRoutes(allocator: std.mem.Allocator) ![]const Route {
    var routes = std.ArrayList(Route).init(allocator);
    errdefer {
        for (routes.items) |r| {
            allocator.free(r.module_name);
            allocator.free(r.path);
        }
        routes.deinit();
    }
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .get,
        .path = try allocator.dupe(u8, "/"),
        .handler = @import("routes/index.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .post,
        .path = try allocator.dupe(u8, "/"),
        .handler = @import("routes/index.zig").post,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .get,
        .path = try allocator.dupe(u8, "/users/:id"),
        .handler = @import("routes/users/:id/index.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .post,
        .path = try allocator.dupe(u8, "/users/:id"),
        .handler = @import("routes/users/:id/index.zig").post,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "json"),
        .method = .get,
        .path = try allocator.dupe(u8, "/api/json"),
        .handler = @import("routes/api/json.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "json"),
        .method = .post,
        .path = try allocator.dupe(u8, "/api/json"),
        .handler = @import("routes/api/json.zig").post,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .get,
        .path = try allocator.dupe(u8, "/demo/conditionals"),
        .handler = @import("routes/demo/conditionals/index.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "index"),
        .method = .get,
        .path = try allocator.dupe(u8, "/profile"),
        .handler = @import("routes/profile/index.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "about"),
        .method = .get,
        .path = try allocator.dupe(u8, "/about"),
        .handler = @import("routes/about.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "login"),
        .method = .get,
        .path = try allocator.dupe(u8, "/login"),
        .handler = @import("routes/login.zig").get,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "login"),
        .method = .post,
        .path = try allocator.dupe(u8, "/login"),
        .handler = @import("routes/login.zig").post,
    });
    try routes.append(Route{
        .module_name = try allocator.dupe(u8, "logout"),
        .method = .get,
        .path = try allocator.dupe(u8, "/logout"),
        .handler = @import("routes/logout.zig").get,
    });
    return routes.toOwnedSlice();
}

pub fn getTemplates(allocator: std.mem.Allocator) ![]const Template {
    var templates = std.ArrayList(Template).init(allocator);
    errdefer {
        for (templates.items) |t| {
            allocator.free(t.name);
        }
        templates.deinit();
    }
    try templates.append(Template{
        .name = try allocator.dupe(u8, "layout"),
        .buffer = @embedFile("routes/layout.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "login"),
        .buffer = @embedFile("routes/login.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "about"),
        .buffer = @embedFile("routes/about.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "components/button"),
        .buffer = @embedFile("routes/components/button.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "demo/conditionals/index"),
        .buffer = @embedFile("routes/demo/conditionals/index.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "profile/layout"),
        .buffer = @embedFile("routes/profile/layout.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "profile/index"),
        .buffer = @embedFile("routes/profile/index.zmx"),
    });
    try templates.append(Template{
        .name = try allocator.dupe(u8, "index"),
        .buffer = @embedFile("routes/index.zmx"),
    });
    return templates.toOwnedSlice();
}